// <auto-generated />
using System;
using DataRoom;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataRoom.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230228030935_update_project_schema")]
    partial class update_project_schema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataRoom.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            City = "Dili",
                            CompanyName = "Ministry of Finance",
                            ConcurrencyStamp = "9b3ed7d8-dbd1-47f1-b428-d7da627509c9",
                            Country = "Timor-Leste",
                            Email = "admin@email.com",
                            EmailConfirmed = true,
                            LastName = "admin",
                            LockoutEnabled = false,
                            Name = "Admin",
                            NormalizedEmail = "ADMIN@EMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEDj13HOQNLWtq4h3szvfb9HO7eFlfbq8om+wMaPUWq/MlpuvWUuS/5eI0QMjsp13jw==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4674de22-6977-46c1-9ed4-a40ef238dba8",
                            StreetAddress = "Main Street",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdba",
                            AccessFailedCount = 0,
                            City = "Dili",
                            CompanyName = "Ministry of Finance",
                            ConcurrencyStamp = "b10bfffe-5741-4b19-8fc0-9dc16b8f8ec9",
                            Country = "Timor-Leste",
                            Email = "owner1@email.com",
                            EmailConfirmed = true,
                            LastName = "owner1",
                            LockoutEnabled = false,
                            Name = "Project Owner1",
                            NormalizedEmail = "OWNER1@EMAIL.COM",
                            NormalizedUserName = "OWNER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEN5zubBRUxhKNNJW3leChx5Qx4Oa3O/U5lvudHdxa+fPVayS1c3cSu7T1RsnoS8f6g==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d890b020-d722-4ae6-8bd9-8f81cd96e85a",
                            StreetAddress = "Main Street",
                            TwoFactorEnabled = false,
                            UserName = "owner1"
                        },
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdbb",
                            AccessFailedCount = 0,
                            City = "Dili",
                            CompanyName = "Ministry of Finance",
                            ConcurrencyStamp = "1f7066b1-307f-44a8-93c2-ca331e701563",
                            Country = "Timor-Leste",
                            Email = "owner2@email.com",
                            EmailConfirmed = true,
                            LastName = "owner2",
                            LockoutEnabled = false,
                            Name = "Project Owner2",
                            NormalizedEmail = "OWNER2@EMAIL.COM",
                            NormalizedUserName = "OWNER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEAkQDtbKOddM8r4I+Fh2VEugxagAl2E5pFpnEgyvhbLZPzkz80ICW+U7DA69PIuwhA==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "51e822df-cc61-47ca-bc05-9988f426416a",
                            StreetAddress = "Main Street",
                            TwoFactorEnabled = false,
                            UserName = "owner2"
                        },
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdbc",
                            AccessFailedCount = 0,
                            City = "Dili",
                            CompanyName = "Ministry of Finance",
                            ConcurrencyStamp = "db5b7f53-982d-4676-97f0-5f7ab21475cc",
                            Country = "Timor-Leste",
                            Email = "bidder1@email.com",
                            EmailConfirmed = true,
                            LastName = "bidder1",
                            LockoutEnabled = false,
                            Name = "Bidder1",
                            NormalizedEmail = "BIDDER1@EMAIL.COM",
                            NormalizedUserName = "BIDDER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEMjAl4S8IMqUjMot73sdpiD10A6J/rtVjfEygQADLTr1e6Tsd7zd7WX3J19e51U30w==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6ed8a3a4-5413-47f3-87cc-3c5ae1aff96b",
                            StreetAddress = "Main Street",
                            TwoFactorEnabled = false,
                            UserName = "bidder1"
                        },
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdbd",
                            AccessFailedCount = 0,
                            City = "Dili",
                            CompanyName = "Ministry of Finance",
                            ConcurrencyStamp = "5d4d9b78-0e41-4f14-a178-6e2bb5248e8d",
                            Country = "Timor-Leste",
                            Email = "bidder2@email.com",
                            EmailConfirmed = true,
                            LastName = "bidder2",
                            LockoutEnabled = false,
                            Name = "Bidder2",
                            NormalizedEmail = "BIDDER2@EMAIL.COM",
                            NormalizedUserName = "BIDDER2",
                            PasswordHash = "AQAAAAEAACcQAAAAELQ7MRu7a/tGnW4koe5q2rNuOCV60yk0/TKdfKH2mG7+6gry1krK7cPxODQEvev5Qg==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0d2d4dcd-88d7-4fda-8a77-e88d493ba039",
                            StreetAddress = "Main Street",
                            TwoFactorEnabled = false,
                            UserName = "bidder2"
                        },
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdbe",
                            AccessFailedCount = 0,
                            City = "Dili",
                            CompanyName = "Ministry of Finance",
                            ConcurrencyStamp = "3ac3befb-34cf-433a-ad4e-6bed82517f6c",
                            Country = "Timor-Leste",
                            Email = "bidder3@email.com",
                            EmailConfirmed = true,
                            LastName = "bidder3",
                            LockoutEnabled = false,
                            Name = "Bidder3",
                            NormalizedEmail = "BIDDER3@EMAIL.COM",
                            NormalizedUserName = "BIDDER3",
                            PasswordHash = "AQAAAAEAACcQAAAAECiq4KBYQmTSN5OZkJuazeDWOkJneLlraH5jwY6K1ydVt57QehAH/Z78efWMyrlzhg==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6d1a6a09-b862-43aa-be47-18cf486887fb",
                            StreetAddress = "Main Street",
                            TwoFactorEnabled = false,
                            UserName = "bidder3"
                        },
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdbf",
                            AccessFailedCount = 0,
                            City = "Dili",
                            CompanyName = "Ministry of Finance",
                            ConcurrencyStamp = "809e59d3-f075-4ff7-97af-5dfb63d8e066",
                            Country = "Timor-Leste",
                            Email = "bidder4@email.com",
                            EmailConfirmed = true,
                            LastName = "bidder4",
                            LockoutEnabled = false,
                            Name = "Bidder4",
                            NormalizedEmail = "BIDDER4@EMAIL.COM",
                            NormalizedUserName = "BIDDER4",
                            PasswordHash = "AQAAAAEAACcQAAAAEO6ALbdrq5ZmpUIKWLw/oaFPHaYT7N0FsQsT27vT8JaNqPWGmgwtmH6MIZYzQzIIBw==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2d68b8c3-903d-440e-96fa-bad5d4f85430",
                            StreetAddress = "Main Street",
                            TwoFactorEnabled = false,
                            UserName = "bidder4"
                        });
                });

            modelBuilder.Entity("DataRoom.Models.BidderProject", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BidderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BidderId");

                    b.HasIndex("ProjectId");

                    b.ToTable("BidderProjects");
                });

            modelBuilder.Entity("DataRoom.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DataRoom.Models.Project", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            ConcurrencyStamp = "b50658cc-537a-47ab-9006-c5005f419e85",
                            Name = "Admins",
                            NormalizedName = "ADMINS"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7211",
                            ConcurrencyStamp = "1dda4b4b-9118-4ef8-bf2a-b6ddb102d66e",
                            Name = "Owners",
                            NormalizedName = "OWNERS"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7212",
                            ConcurrencyStamp = "cabb6de2-bf09-4e4d-b653-7ecbf56784e4",
                            Name = "Bidders",
                            NormalizedName = "BIDDERS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdba",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdbb",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdbc",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdbd",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdbe",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdbf",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DataRoom.Models.BidderProject", b =>
                {
                    b.HasOne("DataRoom.Models.ApplicationUser", "Bidder")
                        .WithMany("BidderProjects")
                        .HasForeignKey("BidderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataRoom.Models.Project", "Project")
                        .WithMany("ProjectBidders")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Bidder");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DataRoom.Models.Project", b =>
                {
                    b.HasOne("DataRoom.Models.ApplicationUser", null)
                        .WithMany("Projects")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataRoom.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataRoom.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataRoom.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataRoom.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataRoom.Models.ApplicationUser", b =>
                {
                    b.Navigation("BidderProjects");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("DataRoom.Models.Project", b =>
                {
                    b.Navigation("ProjectBidders");
                });
#pragma warning restore 612, 618
        }
    }
}
