// <auto-generated />
using System;
using DataRoom;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataRoom.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataRoom.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            CompanyName = "",
                            ConcurrencyStamp = "734a0e89-284a-4852-b29a-b775eec7920f",
                            Email = "admin@email.com",
                            EmailConfirmed = true,
                            LastName = "admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEAQRwkJWAM4SiMvCHnjcWy6AqvoG3v7+D4D8ACsfVS5ZFtf6KPFPXeMfCWovF3onYQ==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dc919890-4d25-45ee-b552-30ad980c3b72",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdba",
                            AccessFailedCount = 0,
                            CompanyName = "owner company",
                            ConcurrencyStamp = "72514fba-ebea-4095-b3bf-463e5cfaa5e5",
                            Email = "owner1@email.com",
                            EmailConfirmed = true,
                            LastName = "owner1",
                            LockoutEnabled = false,
                            NormalizedEmail = "OWNER1@EMAIL.COM",
                            NormalizedUserName = "OWNER1",
                            PasswordHash = "AQAAAAEAACcQAAAAENN15g5Gfk7eOM10IxRM9u/fNcuCNIzcKGM4kBF8lLtqJYDsjCny4+V1wn+nE1jvZg==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5f41d3f4-cbf9-410e-8170-d1ed9a83a546",
                            TwoFactorEnabled = false,
                            UserName = "owner1"
                        },
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdbb",
                            AccessFailedCount = 0,
                            CompanyName = " company",
                            ConcurrencyStamp = "97d3e745-6afd-4fb4-ba81-7a681086e922",
                            Email = "owner2@email.com",
                            EmailConfirmed = true,
                            LastName = "owner2",
                            LockoutEnabled = false,
                            NormalizedEmail = "OWNER2@EMAIL.COM",
                            NormalizedUserName = "OWNER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEAXuFtRYBDA/yyOKVVaHVleLlNywtkg+JIJ440u/9wSIpniht91IXZHENagYbJou2g==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "42b1e679-833a-45d3-b2dd-9008d4001b99",
                            TwoFactorEnabled = false,
                            UserName = "owner2"
                        },
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdbc",
                            AccessFailedCount = 0,
                            CompanyName = "bidder company",
                            ConcurrencyStamp = "226ed194-ba9b-4e36-ac31-81b28cf61b7a",
                            Email = "bidder1@email.com",
                            EmailConfirmed = true,
                            LastName = "bidder1",
                            LockoutEnabled = false,
                            NormalizedEmail = "BIDDER1@EMAIL.COM",
                            NormalizedUserName = "BIDDER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEHd4NcwNvWqybUF7Kk+90eUGYCrbeQE1zihq7PvBp5QciYmALp5SCCRpAIYNKvda7w==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0c86d8da-68ca-4c14-9420-9ea906992e6f",
                            TwoFactorEnabled = false,
                            UserName = "bidder1"
                        },
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdbd",
                            AccessFailedCount = 0,
                            CompanyName = "bidder company",
                            ConcurrencyStamp = "6889bbeb-4cec-4bef-899d-9ee506a1f379",
                            Email = "bidder2@email.com",
                            EmailConfirmed = true,
                            LastName = "bidder2",
                            LockoutEnabled = false,
                            NormalizedEmail = "BIDDER2@EMAIL.COM",
                            NormalizedUserName = "BIDDER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEO79AFqzfWp3+j/SQDdev83Rg8QAxLapsXEM4/TUiNIYLoklb9IufnIX31USv8y/fg==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7a551a7a-1857-414d-aada-e4e6711afb76",
                            TwoFactorEnabled = false,
                            UserName = "bidder2"
                        },
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdbe",
                            AccessFailedCount = 0,
                            CompanyName = "bidder company",
                            ConcurrencyStamp = "99c2fcfb-3c25-468a-add2-084729ef9cb7",
                            Email = "bidder3@email.com",
                            EmailConfirmed = true,
                            LastName = "bidder3",
                            LockoutEnabled = false,
                            NormalizedEmail = "BIDDER3@EMAIL.COM",
                            NormalizedUserName = "BIDDER3",
                            PasswordHash = "AQAAAAEAACcQAAAAEF1tIs8UOvL8eZOuF31+3Ed/tLY76/VysW3++9bVHoG3RS3Imsib/LkeIj6Vutnm7A==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a9ce6d5f-cb71-414b-a0df-6ba8cc252dde",
                            TwoFactorEnabled = false,
                            UserName = "bidder3"
                        },
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdbf",
                            AccessFailedCount = 0,
                            CompanyName = "bidder company",
                            ConcurrencyStamp = "37fa0825-d094-478b-afb5-aaf4791ccb7f",
                            Email = "bidder4@email.com",
                            EmailConfirmed = true,
                            LastName = "bidder4",
                            LockoutEnabled = false,
                            NormalizedEmail = "BIDDER4@EMAIL.COM",
                            NormalizedUserName = "BIDDER4",
                            PasswordHash = "AQAAAAEAACcQAAAAELwmPIgjA15n4ojsGqHWJrpT4SD86eorgx0fFMNaSRNciN+3SoR+wewO2rYDv7mHPQ==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1525b14b-9154-47ec-b68a-3d2a1a25641d",
                            TwoFactorEnabled = false,
                            UserName = "bidder4"
                        });
                });

            modelBuilder.Entity("DataRoom.Models.BidderProject", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BidderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BidderId");

                    b.HasIndex("ProjectId");

                    b.ToTable("BidderProjects");
                });

            modelBuilder.Entity("DataRoom.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Department = 3,
                            Email = "sothun.thay@icloud.com",
                            Name = "Sothun Thay"
                        },
                        new
                        {
                            Id = 2,
                            Department = 1,
                            Email = "sreyneth.khorn@icloud.com",
                            Name = "Sreyneth Khorn"
                        },
                        new
                        {
                            Id = 3,
                            Department = 0,
                            Email = "nisa.thay@icloud.com",
                            Name = "Nisa Thay"
                        },
                        new
                        {
                            Id = 4,
                            Department = 0,
                            Email = "bosba.sthay@icloud.com",
                            Name = "Bosba Thay"
                        });
                });

            modelBuilder.Entity("DataRoom.Models.Project", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            ConcurrencyStamp = "8fd82ec0-7129-478b-9a11-251df8aafc51",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7211",
                            ConcurrencyStamp = "285ba163-9b0b-496e-8801-46cea158b0fd",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7212",
                            ConcurrencyStamp = "d938d0da-f3bf-4ad9-a093-6e79293a4f71",
                            Name = "Bidder",
                            NormalizedName = "BIDDER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdba",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdbb",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdbc",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdbd",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdbe",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdbf",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DataRoom.Models.BidderProject", b =>
                {
                    b.HasOne("DataRoom.Models.ApplicationUser", "Bidder")
                        .WithMany("BidderProjects")
                        .HasForeignKey("BidderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataRoom.Models.Project", "Project")
                        .WithMany("ProjectBidders")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Bidder");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DataRoom.Models.Project", b =>
                {
                    b.HasOne("DataRoom.Models.ApplicationUser", null)
                        .WithMany("Projects")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataRoom.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataRoom.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataRoom.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataRoom.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataRoom.Models.ApplicationUser", b =>
                {
                    b.Navigation("BidderProjects");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("DataRoom.Models.Project", b =>
                {
                    b.Navigation("ProjectBidders");
                });
#pragma warning restore 612, 618
        }
    }
}
